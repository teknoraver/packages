--- a/src/tcpreplay_api.c
+++ b/src/tcpreplay_api.c
@@ -31,6 +31,7 @@
 #include <unistd.h>
 #include <errno.h>
 #include <stdarg.h>
+#include <pthread.h>
 
 #include "tcpreplay_api.h"
 #include "send_packets.h"
@@ -119,6 +120,9 @@ tcpreplay_init()
     ctx->options->flow_stats = 1;
     ctx->flow_hash_table = flow_hash_table_init(DEFAULT_FLOW_HASH_BUCKET_SIZE);
 
+    /* single thread by default */
+    ctx->options->threads = 1;
+
     ctx->sp_type = SP_TYPE_NONE;
     ctx->iteration = 0;
     ctx->intf1dlt = -1;
@@ -189,6 +193,14 @@ tcpreplay_post_args(tcpreplay_t *ctx, in
         options->maxsleep.tv_nsec = (OPT_VALUE_MAXSLEEP % 1000) * 1000;
     }
 
+    if (HAVE_OPT(THREADS))
+        options->threads = OPT_VALUE_THREADS ? OPT_VALUE_THREADS : sysconf(_SC_NPROCESSORS_ONLN);
+
+    if(options->threads > 1)
+        pthread_mutex_init(&ctx->lock, NULL);
+
+    options->forever = !options->loop;
+
 #ifdef ENABLE_VERBOSE
     if (HAVE_OPT(VERBOSE))
         options->verbose = 1;
@@ -1181,6 +1193,33 @@ out:
     return ret;
 }
 
+void *
+tcpreplay_replay_loop(void *arg)
+{
+    tcpreplay_t *ctx = arg;
+
+    while (!ctx->abort) {
+        if(!ctx->options->forever) {
+            if (ctx->options->threads > 1)
+                pthread_mutex_lock(&ctx->lock);
+            if(!ctx->options->loop) {
+                if (ctx->options->threads > 1)
+                    pthread_mutex_unlock(&ctx->lock);
+                return 0;
+            }
+            ctx->options->loop--;
+            if (ctx->options->threads > 1)
+                pthread_mutex_unlock(&ctx->lock);
+        }
+
+        if (tcpr_replay_index(ctx) < 0)
+            break;
+        if (ctx->options->loopdelay_ms > 0)
+            usleep(ctx->options->loopdelay_ms * 1000);
+    }
+    return 0;
+}
+
 /**
  * \brief sends the traffic out the interfaces
  *
@@ -1190,7 +1229,8 @@ out:
 int
 tcpreplay_replay(tcpreplay_t *ctx)
 {
-    int rcode;
+    int i;
+    pthread_t threads[ctx->options->threads];
 
     assert(ctx);
 
@@ -1217,19 +1257,11 @@ tcpreplay_replay(tcpreplay_t *ctx)
     ctx->running = true;
 
     /* main loop, when not looping forever (or until abort) */
-    if (ctx->options->loop > 0) {
-        while (ctx->options->loop-- && !ctx->abort) {  /* limited loop */
-            if ((rcode = tcpr_replay_index(ctx)) < 0)
-                return rcode;
-            if (ctx->options->loop > 0 && !ctx->abort && ctx->options->loopdelay_ms > 0)
-            	usleep(ctx->options->loopdelay_ms * 1000);
-        }
-    } else {
-        while (!ctx->abort) { /* loop forever unless user aborts */
-            if ((rcode = tcpr_replay_index(ctx)) < 0)
-                return rcode;
-        }
-    }
+    for(i = 0; i < ctx->options->threads; i++)
+        pthread_create(threads + i, NULL, tcpreplay_replay_loop, ctx);
+
+    for(i = 0; i < ctx->options->threads; i++)
+        pthread_join(threads[i], NULL);
 
     ctx->running = false;
 
--- a/src/tcpreplay_api.h
+++ b/src/tcpreplay_api.h
@@ -106,6 +106,7 @@ typedef struct tcpreplay_opt_s {
 
     tcpreplay_speed_t speed;
     u_int32_t loop;
+    bool forever;
     u_int32_t loopdelay_ms;
 
     int stats;
@@ -160,6 +161,7 @@ typedef struct tcpreplay_opt_s {
     int flow_expiry;
 
     int unique_ip;
+    int threads;
 } tcpreplay_opt_t;
 
 
@@ -203,6 +205,7 @@ typedef struct tcpreplay_s {
     volatile bool abort;
     volatile bool suspend;
     bool running;
+    pthread_mutex_t lock;
 } tcpreplay_t;
 
 
--- a/src/tcpreplay_opts.def
+++ b/src/tcpreplay_opts.def
@@ -541,6 +541,15 @@ Default is 0 (no expiry) and a typical v
 EOText;
 };
 
+flag = {
+    name        = threads;
+    value       = a;
+    arg-range   = "0->";
+    arg-type    = number;
+    max         = 1;
+    descrip     = "Number of threads to spawn";
+    doc         = "";
+};
 
 flag = {
     name        = pid;
--- a/configure
+++ b/configure
@@ -19146,6 +19146,9 @@ fi
     if test "$numa_found" = "yes" && test "$pthread_found" = "yes" && test -f "${foundpcap}/../lib/libpfring.a"; then
         pf_ring_found=yes
     fi
+    if test "$pthread_found" = "yes"; then
+        LIBS="$LIBS -pthread"
+    fi
 fi
 
 OLDLIBS="$LIBS"
--- a/src/tcpreplay_opts.c
+++ b/src/tcpreplay_opts.c
@@ -2,7 +2,7 @@
  *  
  *  DO NOT EDIT THIS FILE   (tcpreplay_opts.c)
  *  
- *  It has been AutoGen-ed  December 17, 2014 at 03:12:31 PM by AutoGen 5.16.2
+ *  It has been AutoGen-ed  November  4, 2015 at 06:46:26 PM by AutoGen 5.16.2
  *  From the definitions    tcpreplay_opts.def
  *  and the template file   options
  *
@@ -78,7 +78,7 @@ extern FILE * option_usage_fp;
 /*
  *  tcpreplay option static const strings
  */
-static char const tcpreplay_opt_strs[3802] =
+static char const tcpreplay_opt_strs[3845] =
 /*     0 */ "tcpreplay (tcpreplay)\n"
             "Copyright (C) 2000-2014 Aaron Turner and Fred Klassen, all rights reserved.\n"
             "This is free software. It is licensed for use, modification and\n"
@@ -177,41 +177,44 @@ static char const tcpreplay_opt_strs[380
 /*  2439 */ "Number of inactive seconds before a flow is considered expired\0"
 /*  2502 */ "FLOW_EXPIRY\0"
 /*  2514 */ "flow-expiry\0"
-/*  2526 */ "Print the PID of tcpreplay at startup\0"
-/*  2564 */ "PID\0"
-/*  2568 */ "pid\0"
-/*  2572 */ "Write packets directly to an interface via Quick_TX module\0"
-/*  2631 */ "QUICK_TX\0"
-/*  2640 */ "quick-tx\0"
-/*  2649 */ "Print statistics every X seconds\0"
-/*  2682 */ "STATS\0"
-/*  2688 */ "stats\0"
-/*  2694 */ "Print version information\0"
-/*  2720 */ "VERSION\0"
-/*  2728 */ "version\0"
-/*  2736 */ "Display less usage information and exit\0"
-/*  2776 */ "LESS_HELP\0"
-/*  2786 */ "less-help\0"
-/*  2796 */ "Display extended usage information and exit\0"
-/*  2840 */ "help\0"
-/*  2845 */ "Extended usage information passed thru pager\0"
-/*  2890 */ "more-help\0"
-/*  2900 */ "Save the option state to a config file\0"
-/*  2939 */ "save-opts\0"
-/*  2949 */ "Load options from a config file\0"
-/*  2981 */ "LOAD_OPTS\0"
-/*  2991 */ "no-load-opts\0"
-/*  3004 */ "no\0"
-/*  3007 */ "TCPREPLAY\0"
-/*  3017 */ "tcpreplay (tcpreplay) - Replay network traffic stored in pcap files\n"
+/*  2526 */ "Number of threads to spawn\0"
+/*  2553 */ "THREADS\0"
+/*  2561 */ "threads\0"
+/*  2569 */ "Print the PID of tcpreplay at startup\0"
+/*  2607 */ "PID\0"
+/*  2611 */ "pid\0"
+/*  2615 */ "Write packets directly to an interface via Quick_TX module\0"
+/*  2674 */ "QUICK_TX\0"
+/*  2683 */ "quick-tx\0"
+/*  2692 */ "Print statistics every X seconds\0"
+/*  2725 */ "STATS\0"
+/*  2731 */ "stats\0"
+/*  2737 */ "Print version information\0"
+/*  2763 */ "VERSION\0"
+/*  2771 */ "version\0"
+/*  2779 */ "Display less usage information and exit\0"
+/*  2819 */ "LESS_HELP\0"
+/*  2829 */ "less-help\0"
+/*  2839 */ "Display extended usage information and exit\0"
+/*  2883 */ "help\0"
+/*  2888 */ "Extended usage information passed thru pager\0"
+/*  2933 */ "more-help\0"
+/*  2943 */ "Save the option state to a config file\0"
+/*  2982 */ "save-opts\0"
+/*  2992 */ "Load options from a config file\0"
+/*  3024 */ "LOAD_OPTS\0"
+/*  3034 */ "no-load-opts\0"
+/*  3047 */ "no\0"
+/*  3050 */ "TCPREPLAY\0"
+/*  3060 */ "tcpreplay (tcpreplay) - Replay network traffic stored in pcap files\n"
             "USAGE:  %s [ -<flag> [<val>] | --<name>[{=| }<val>] ]... <pcap_file(s)>\n\0"
-/*  3158 */ "$$/\0"
-/*  3162 */ ".tcpreplayrc\0"
-/*  3175 */ "tcpreplay-users@lists.sourceforge.net\0"
-/*  3213 */ "\n"
+/*  3201 */ "$$/\0"
+/*  3205 */ ".tcpreplayrc\0"
+/*  3218 */ "tcpreplay-users@lists.sourceforge.net\0"
+/*  3256 */ "\n"
             "tcpreplay is a tool for replaying network traffic from files saved with\n"
             "tcpdump or other tools which write pcap(3) files.\n\0"
-/*  3337 */ "\n"
+/*  3380 */ "\n"
             "The basic operation of tcpreplay is to resend all packets from the input\n"
             "file(s) at the speed at which they were recorded, or a specified data rate,\n"
             "up to as fast as the hardware is capable.\n\n"
@@ -573,66 +576,75 @@ static int const aFlow_ExpiryCantList[]
         | OPTST_SET_ARGTYPE(OPARG_TYPE_NUMERIC))
 
 /*
+ *  threads option description:
+ */
+#define THREADS_DESC      (tcpreplay_opt_strs+2526)
+#define THREADS_NAME      (tcpreplay_opt_strs+2553)
+#define THREADS_name      (tcpreplay_opt_strs+2561)
+#define THREADS_FLAGS     (OPTST_DISABLED \
+        | OPTST_SET_ARGTYPE(OPARG_TYPE_NUMERIC))
+
+/*
  *  pid option description:
  */
-#define PID_DESC      (tcpreplay_opt_strs+2526)
-#define PID_NAME      (tcpreplay_opt_strs+2564)
-#define PID_name      (tcpreplay_opt_strs+2568)
+#define PID_DESC      (tcpreplay_opt_strs+2569)
+#define PID_NAME      (tcpreplay_opt_strs+2607)
+#define PID_name      (tcpreplay_opt_strs+2611)
 #define PID_FLAGS     (OPTST_DISABLED)
 
 /*
  *  quick-tx option description:
  */
-#define QUICK_TX_DESC      (tcpreplay_opt_strs+2572)
-#define QUICK_TX_NAME      (tcpreplay_opt_strs+2631)
-#define QUICK_TX_name      (tcpreplay_opt_strs+2640)
+#define QUICK_TX_DESC      (tcpreplay_opt_strs+2615)
+#define QUICK_TX_NAME      (tcpreplay_opt_strs+2674)
+#define QUICK_TX_name      (tcpreplay_opt_strs+2683)
 #define QUICK_TX_FLAGS     (OPTST_DISABLED)
 
 /*
  *  stats option description:
  */
-#define STATS_DESC      (tcpreplay_opt_strs+2649)
-#define STATS_NAME      (tcpreplay_opt_strs+2682)
-#define STATS_name      (tcpreplay_opt_strs+2688)
+#define STATS_DESC      (tcpreplay_opt_strs+2692)
+#define STATS_NAME      (tcpreplay_opt_strs+2725)
+#define STATS_name      (tcpreplay_opt_strs+2731)
 #define STATS_FLAGS     (OPTST_DISABLED \
         | OPTST_SET_ARGTYPE(OPARG_TYPE_NUMERIC))
 
 /*
  *  version option description:
  */
-#define VERSION_DESC      (tcpreplay_opt_strs+2694)
-#define VERSION_NAME      (tcpreplay_opt_strs+2720)
-#define VERSION_name      (tcpreplay_opt_strs+2728)
+#define VERSION_DESC      (tcpreplay_opt_strs+2737)
+#define VERSION_NAME      (tcpreplay_opt_strs+2763)
+#define VERSION_name      (tcpreplay_opt_strs+2771)
 #define VERSION_FLAGS     (OPTST_DISABLED)
 
 /*
  *  less-help option description:
  */
-#define LESS_HELP_DESC      (tcpreplay_opt_strs+2736)
-#define LESS_HELP_NAME      (tcpreplay_opt_strs+2776)
-#define LESS_HELP_name      (tcpreplay_opt_strs+2786)
+#define LESS_HELP_DESC      (tcpreplay_opt_strs+2779)
+#define LESS_HELP_NAME      (tcpreplay_opt_strs+2819)
+#define LESS_HELP_name      (tcpreplay_opt_strs+2829)
 #define LESS_HELP_FLAGS     (OPTST_DISABLED | OPTST_IMM)
 
 /*
  *  Help/More_Help option descriptions:
  */
-#define HELP_DESC       (tcpreplay_opt_strs+2796)
-#define HELP_name       (tcpreplay_opt_strs+2840)
+#define HELP_DESC       (tcpreplay_opt_strs+2839)
+#define HELP_name       (tcpreplay_opt_strs+2883)
 #ifdef HAVE_WORKING_FORK
-#define MORE_HELP_DESC  (tcpreplay_opt_strs+2845)
-#define MORE_HELP_name  (tcpreplay_opt_strs+2890)
+#define MORE_HELP_DESC  (tcpreplay_opt_strs+2888)
+#define MORE_HELP_name  (tcpreplay_opt_strs+2933)
 #define MORE_HELP_FLAGS (OPTST_IMM | OPTST_NO_INIT)
 #else
 #define MORE_HELP_DESC  NULL
 #define MORE_HELP_name  NULL
 #define MORE_HELP_FLAGS (OPTST_OMITTED | OPTST_NO_INIT)
 #endif
-#define SAVE_OPTS_DESC  (tcpreplay_opt_strs+2900)
-#define SAVE_OPTS_name  (tcpreplay_opt_strs+2939)
-#define LOAD_OPTS_DESC     (tcpreplay_opt_strs+2949)
-#define LOAD_OPTS_NAME     (tcpreplay_opt_strs+2981)
-#define NO_LOAD_OPTS_name  (tcpreplay_opt_strs+2991)
-#define LOAD_OPTS_pfx      (tcpreplay_opt_strs+3004)
+#define SAVE_OPTS_DESC  (tcpreplay_opt_strs+2943)
+#define SAVE_OPTS_name  (tcpreplay_opt_strs+2982)
+#define LOAD_OPTS_DESC     (tcpreplay_opt_strs+2992)
+#define LOAD_OPTS_NAME     (tcpreplay_opt_strs+3024)
+#define NO_LOAD_OPTS_name  (tcpreplay_opt_strs+3034)
+#define LOAD_OPTS_pfx      (tcpreplay_opt_strs+3047)
 #define LOAD_OPTS_name     (NO_LOAD_OPTS_name + 3)
 /*
  *  Declare option callback procedures
@@ -655,8 +667,8 @@ extern tOptProc
 static tOptProc
     doOptFlow_Expiry,  doOptLess_Help,    doOptLimit,
     doOptLoop,         doOptLoopdelay_Ms, doOptPid,
-    doOptPps_Multi,    doOptStats,        doOptVersion,
-    doUsageOpt;
+    doOptPps_Multi,    doOptStats,        doOptThreads,
+    doOptVersion,      doUsageOpt;
 
 /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
 /**
@@ -989,8 +1001,20 @@ static tOptDesc optDesc[OPTION_CT] = {
      /* desc, NAME, name */ FLOW_EXPIRY_DESC, FLOW_EXPIRY_NAME, FLOW_EXPIRY_name,
      /* disablement strs */ NULL, NULL },
 
-  {  /* entry idx, value */ 27, VALUE_OPT_PID,
-     /* equiv idx, value */ 27, VALUE_OPT_PID,
+  {  /* entry idx, value */ 27, VALUE_OPT_THREADS,
+     /* equiv idx, value */ 27, VALUE_OPT_THREADS,
+     /* equivalenced to  */ NO_EQUIVALENT,
+     /* min, max, act ct */ 0, 1, 0,
+     /* opt state flags  */ THREADS_FLAGS, 0,
+     /* last opt argumnt */ { NULL }, /* --threads */
+     /* arg list/cookie  */ NULL,
+     /* must/cannot opts */ NULL, NULL,
+     /* option proc      */ doOptThreads,
+     /* desc, NAME, name */ THREADS_DESC, THREADS_NAME, THREADS_name,
+     /* disablement strs */ NULL, NULL },
+
+  {  /* entry idx, value */ 28, VALUE_OPT_PID,
+     /* equiv idx, value */ 28, VALUE_OPT_PID,
      /* equivalenced to  */ NO_EQUIVALENT,
      /* min, max, act ct */ 0, 1, 0,
      /* opt state flags  */ PID_FLAGS, 0,
@@ -1001,8 +1025,8 @@ static tOptDesc optDesc[OPTION_CT] = {
      /* desc, NAME, name */ PID_DESC, PID_NAME, PID_name,
      /* disablement strs */ NULL, NULL },
 
-  {  /* entry idx, value */ 28, VALUE_OPT_QUICK_TX,
-     /* equiv idx, value */ 28, VALUE_OPT_QUICK_TX,
+  {  /* entry idx, value */ 29, VALUE_OPT_QUICK_TX,
+     /* equiv idx, value */ 29, VALUE_OPT_QUICK_TX,
      /* equivalenced to  */ NO_EQUIVALENT,
      /* min, max, act ct */ 0, 1, 0,
      /* opt state flags  */ QUICK_TX_FLAGS, 0,
@@ -1013,8 +1037,8 @@ static tOptDesc optDesc[OPTION_CT] = {
      /* desc, NAME, name */ QUICK_TX_DESC, QUICK_TX_NAME, QUICK_TX_name,
      /* disablement strs */ NULL, NULL },
 
-  {  /* entry idx, value */ 29, VALUE_OPT_STATS,
-     /* equiv idx, value */ 29, VALUE_OPT_STATS,
+  {  /* entry idx, value */ 30, VALUE_OPT_STATS,
+     /* equiv idx, value */ 30, VALUE_OPT_STATS,
      /* equivalenced to  */ NO_EQUIVALENT,
      /* min, max, act ct */ 0, 1, 0,
      /* opt state flags  */ STATS_FLAGS, 0,
@@ -1025,8 +1049,8 @@ static tOptDesc optDesc[OPTION_CT] = {
      /* desc, NAME, name */ STATS_DESC, STATS_NAME, STATS_name,
      /* disablement strs */ NULL, NULL },
 
-  {  /* entry idx, value */ 30, VALUE_OPT_VERSION,
-     /* equiv idx, value */ 30, VALUE_OPT_VERSION,
+  {  /* entry idx, value */ 31, VALUE_OPT_VERSION,
+     /* equiv idx, value */ 31, VALUE_OPT_VERSION,
      /* equivalenced to  */ NO_EQUIVALENT,
      /* min, max, act ct */ 0, 1, 0,
      /* opt state flags  */ VERSION_FLAGS, 0,
@@ -1037,8 +1061,8 @@ static tOptDesc optDesc[OPTION_CT] = {
      /* desc, NAME, name */ VERSION_DESC, VERSION_NAME, VERSION_name,
      /* disablement strs */ NULL, NULL },
 
-  {  /* entry idx, value */ 31, VALUE_OPT_LESS_HELP,
-     /* equiv idx, value */ 31, VALUE_OPT_LESS_HELP,
+  {  /* entry idx, value */ 32, VALUE_OPT_LESS_HELP,
+     /* equiv idx, value */ 32, VALUE_OPT_LESS_HELP,
      /* equivalenced to  */ NO_EQUIVALENT,
      /* min, max, act ct */ 0, 1, 0,
      /* opt state flags  */ LESS_HELP_FLAGS, 0,
@@ -1105,15 +1129,15 @@ static tOptDesc optDesc[OPTION_CT] = {
  *
  *  Define the tcpreplay Option Environment
  */
-#define zPROGNAME       (tcpreplay_opt_strs+3007)
-#define zUsageTitle     (tcpreplay_opt_strs+3017)
-#define zRcName         (tcpreplay_opt_strs+3162)
+#define zPROGNAME       (tcpreplay_opt_strs+3050)
+#define zUsageTitle     (tcpreplay_opt_strs+3060)
+#define zRcName         (tcpreplay_opt_strs+3205)
 static char const * const apzHomeList[2] = {
-    tcpreplay_opt_strs+3158,
+    tcpreplay_opt_strs+3201,
     NULL };
-#define zBugsAddr       (tcpreplay_opt_strs+3175)
-#define zExplain        (tcpreplay_opt_strs+3213)
-#define zDetail         (tcpreplay_opt_strs+3337)
+#define zBugsAddr       (tcpreplay_opt_strs+3218)
+#define zExplain        (tcpreplay_opt_strs+3256)
+#define zDetail         (tcpreplay_opt_strs+3380)
 #define zFullVersion    (NULL)
 /* extracted from optcode.tlib near line 350 */
 
@@ -1388,6 +1412,41 @@ emit_ranges:
 
 /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
 /**
+ * Code to handle the threads option.
+ *
+ * @param pOptions the tcpreplay options data structure
+ * @param pOptDesc the option descriptor for this option.
+ */
+static void
+doOptThreads(tOptions* pOptions, tOptDesc* pOptDesc)
+{
+    static struct {long rmin, rmax;} const rng[1] = {
+        { 0, LONG_MAX } };
+    int  ix;
+
+    if (pOptions <= OPTPROC_EMIT_LIMIT)
+        goto emit_ranges;
+    optionNumericVal(pOptions, pOptDesc);
+
+    for (ix = 0; ix < 1; ix++) {
+        if (pOptDesc->optArg.argInt < rng[ix].rmin)
+            continue;  /* ranges need not be ordered. */
+        if (pOptDesc->optArg.argInt == rng[ix].rmin)
+            return;
+        if (rng[ix].rmax == LONG_MIN)
+            continue;
+        if (pOptDesc->optArg.argInt <= rng[ix].rmax)
+            return;
+    }
+
+    option_usage_fp = stderr;
+
+emit_ranges:
+    optionShowRange(pOptions, pOptDesc, (void *)rng, 1);
+}
+
+/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
+/**
  * Code to handle the pid option.
  *
  * @param pOptions the tcpreplay options data structure
@@ -1396,7 +1455,7 @@ emit_ranges:
 static void
 doOptPid(tOptions* pOptions, tOptDesc* pOptDesc)
 {
-    /* extracted from tcpreplay_opts.def, line 550 */
+    /* extracted from tcpreplay_opts.def, line 559 */
 
     fprintf(stderr, "PID: %d\n", getpid());
 
@@ -1449,7 +1508,7 @@ emit_ranges:
 static void
 doOptVersion(tOptions* pOptions, tOptDesc* pOptDesc)
 {
-    /* extracted from tcpreplay_opts.def, line 593 */
+    /* extracted from tcpreplay_opts.def, line 602 */
 
     fprintf(stderr, "tcpreplay version: %s (build %s)", VERSION, git_version());
 #ifdef DEBUG
@@ -1526,7 +1585,7 @@ doOptVersion(tOptions* pOptions, tOptDes
 static void
 doOptLess_Help(tOptions* pOptions, tOptDesc* pOptDesc)
 {
-    /* extracted from tcpreplay_opts.def, line 665 */
+    /* extracted from tcpreplay_opts.def, line 674 */
 
     USAGE(EXIT_FAILURE);
 
@@ -1595,7 +1654,7 @@ tOptions tcpreplayOptions = {
       NO_EQUIVALENT, /* '-#' option index */
       NO_EQUIVALENT /* index of default opt */
     },
-    36 /* full option count */, 32 /* user option count */,
+    37 /* full option count */, 33 /* user option count */,
     tcpreplay_full_usage, tcpreplay_short_usage,
     NULL, NULL,
     PKGDATADIR, tcpreplay_packager_info
--- a/src/tcpreplay_opts.h
+++ b/src/tcpreplay_opts.h
@@ -2,7 +2,7 @@
  *  
  *  DO NOT EDIT THIS FILE   (tcpreplay_opts.h)
  *  
- *  It has been AutoGen-ed  December 17, 2014 at 03:12:31 PM by AutoGen 5.16.2
+ *  It has been AutoGen-ed  November  4, 2015 at 06:46:26 PM by AutoGen 5.16.2
  *  From the definitions    tcpreplay_opts.def
  *  and the template file   options
  *
@@ -94,18 +94,19 @@ typedef enum {
     INDEX_OPT_NM_DELAY       = 24,
     INDEX_OPT_NO_FLOW_STATS  = 25,
     INDEX_OPT_FLOW_EXPIRY    = 26,
-    INDEX_OPT_PID            = 27,
-    INDEX_OPT_QUICK_TX       = 28,
-    INDEX_OPT_STATS          = 29,
-    INDEX_OPT_VERSION        = 30,
-    INDEX_OPT_LESS_HELP      = 31,
-    INDEX_OPT_HELP           = 32,
-    INDEX_OPT_MORE_HELP      = 33,
-    INDEX_OPT_SAVE_OPTS      = 34,
-    INDEX_OPT_LOAD_OPTS      = 35
+    INDEX_OPT_THREADS        = 27,
+    INDEX_OPT_PID            = 28,
+    INDEX_OPT_QUICK_TX       = 29,
+    INDEX_OPT_STATS          = 30,
+    INDEX_OPT_VERSION        = 31,
+    INDEX_OPT_LESS_HELP      = 32,
+    INDEX_OPT_HELP           = 33,
+    INDEX_OPT_MORE_HELP      = 34,
+    INDEX_OPT_SAVE_OPTS      = 35,
+    INDEX_OPT_LOAD_OPTS      = 36
 } teOptIndex;
 
-#define OPTION_CT    36
+#define OPTION_CT    37
 
 /*
  *  Interface defines for all options.  Replace "n" with the UPPER_CASED
@@ -196,9 +197,12 @@ typedef enum {
 #define VALUE_OPT_FLOW_EXPIRY    26
 
 #define OPT_VALUE_FLOW_EXPIRY    (DESC(FLOW_EXPIRY).optArg.argInt)
+#define VALUE_OPT_THREADS        'a'
+
+#define OPT_VALUE_THREADS        (DESC(THREADS).optArg.argInt)
 #define VALUE_OPT_PID            'P'
-#define VALUE_OPT_QUICK_TX       28
-#define VALUE_OPT_STATS          29
+#define VALUE_OPT_QUICK_TX       29
+#define VALUE_OPT_STATS          30
 
 #define OPT_VALUE_STATS          (DESC(STATS).optArg.argInt)
 #define VALUE_OPT_VERSION        'V'
